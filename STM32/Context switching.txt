.syntax unified
.cpu cortex-m3
.thumb
.global main
/* ------------------------------------------------------------
   ЁЯза Stack pointers (simulation only)
   ржжрзБржЗржЯрж╛ ржЖрж▓рж╛ржжрж╛ ржЯрж╛рж╕рзНржХрзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ stack memory ржзрж░рж╛ рж╣рж▓рзЛ
------------------------------------------------------------ */
.equ TASK1_STACK, 0x20001000
.equ TASK2_STACK, 0x20002000

/* ------------------------------------------------------------
   ЁЯзй Pseudo tasks тАФ ржмрж╛ржЗрж░рзЗ define ржХрж░рж╛ рж╣ржмрзЗ
------------------------------------------------------------ */
.extern task1
.extern task2


/* ------------------------------------------------------------
   ЁЯПБ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо рж╢рзБрж░рзБ
------------------------------------------------------------ */
main:
    LDR r0, =TASK1_STACK      @ Task1 ржПрж░ stack pointer ржарж┐ржХрж╛ржирж╛
    LDR r1, =TASK2_STACK      @ Task2 ржПрж░ stack pointer ржарж┐ржХрж╛ржирж╛

    MOV sp, r0                @ Stack pointer рж╕рзЗржЯ ржХрж░рж▓рж╛ржо Task1 ржПрж░ ржЬржирзНржп
    BL task1                  @ Task1 рж╢рзБрж░рзБ


/* ------------------------------------------------------------
   ЁЯФБ Context Switch Routine
   ЁЯСЙ ржХрж╛ржЬ: Task1 тЖФ Task2 ржПрж░ ржорж╛ржЭрзЗ context ржмржжрж▓рж╛ржирзЛ
------------------------------------------------------------ */
context_switch:
    /* ЁЯзй Step 1: ржмрж░рзНрждржорж╛ржи Task ржПрж░ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ Stack ржП Save ржХрж░рж╛ */
    PUSH {r4-r11, lr}         @ Low registers (callee-saved) рж╕ржВрж░ржХрзНрж╖ржг

    /* ЁЯзй Step 2: ржмрж░рзНрждржорж╛ржи Task ржПрж░ SP рж╕ржВрж░ржХрзНрж╖ржг */
    STR sp, [r0]              @ Task1 ржПрж░ stack pointer ржорзЗржорж░рж┐рждрзЗ рж░рж╛ржЦрзЛ

    /* ЁЯзй Step 3: ржЕржирзНржп Task ржПрж░ SP рж▓рзЛржб */
    LDR sp, [r1]              @ Task2 ржПрж░ stack pointer рж░рж┐рж╕рзНржЯрзЛрж░ ржХрж░рзЛ

    /* ЁЯзй Step 4: Task2 ржПрж░ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржкрзБржирж░рзБржжрзНржзрж╛рж░ */
    POP {r4-r11, lr}          @ ржкрзВрж░рзНржмрзЗрж░ ржорж╛ржиржЧрзБрж▓рзЛ restore

    /* ЁЯзй Step 5: ржирждрзБржи Task Resume */
    BX lr                     @ Link register ржП ржлрж┐рж░рзЗ ржЧрж┐рзЯрзЗ ржкрж░рзЗрж░ Task ржЪрж╛рж▓рж╛ржУ

    B .                       @ ржПржЦрж╛ржирзЗ ржерзЗржорзЗ ржерж╛ржХржмрзЗ (infinite loop, debugging)


/* ------------------------------------------------------------
   ЁЯкД Task 1: LED Blink Simulation
------------------------------------------------------------ */
.thumb_func
task1:
    MOV r4, #0                @ LED blink counter

loop1:
    ADD r4, r4, #1
    CMP r4, #1000
    BNE loop1                 @ Delay simulation
    BL context_switch         @ Task1 тЖТ Task2 context switch
    B task1                   @ ржЖржмрж╛рж░ Task1 ржЪрж╛рж▓рж╛ржУ


/* ------------------------------------------------------------
   ЁЯкД Task 2: Button Check Simulation
------------------------------------------------------------ */
.thumb_func
task2:
    MOV r5, #0                @ Button press counter

loop2:
    ADD r5, r5, #1
    CMP r5, #500
    BNE loop2                 @ Delay simulation
    BL context_switch         @ Task2 тЖТ Task1 context switch
    B task2                   @ ржЖржмрж╛рж░ Task2 ржЪрж╛рж▓рж╛ржУ
